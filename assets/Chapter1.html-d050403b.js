import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{r as n,o,c as r,d as s,e as a,f as i,b as t}from"./app-9011bd5d.js";const c={},p={href:"https://www.zhihu.com/column/paogenjiudi",target:"_blank",rel:"noopener noreferrer"},h=t('<h2 id="_1-基本术语" tabindex="-1"><a class="header-anchor" href="#_1-基本术语" aria-hidden="true">#</a> 1. 基本术语</h2><ul><li><p><strong>位（bit, binary digit）</strong>，表示为 <code>b</code>，亦称二进制位、比特位、位元，指二进制数中的一位。</p><ul><li>位串（bit string）：一连串的位</li></ul></li><li><p><strong>字节（byte）</strong>，表示为 <code>B</code>，又称位元组：</p><ul><li>半字节（nibble）：4个 bit</li><li>字节（byte）：8个 bit。有时用 8 位组（Octet）来强调 8 比特串</li><li>字（word）、双字（Dword, double word）、四字（Qword, Quad word）、十字（Tbyte, Ten byte）</li></ul><blockquote><p>现代 PC 一般以字节为单位，称为为按字节编址，因此字节一般也是存储器的最小存取单位以及处理器的最小寻址单位。<br> 这与字符编码关系密切，比如码元的单字节与多字节、字节序的大端序与小端序等，都与以字节为基础的基本数据类型密切相关。</p></blockquote></li><li><p><strong>字与字长</strong></p><ul><li>字（word）：作为一整个整体来处理或运算的一串比特位，通常分为若干字节</li><li>字长：字的长度（位数），决定了 CPU 一次操作实际处理的比特位数量。字长由 CPU 对外数据通路的数据总线宽度决定。</li></ul><blockquote><p>一般来说，计算机可以最高效处理的数据大小应该与其字长相同。<br> 桌面平台的处理器字长基本是 64 位，嵌入式平台 32 位，在某些专业领域（高端显卡等）64位甚至高达128位、256位。</p></blockquote></li><li><p><strong>编码（encode）</strong>：信息从一种形式转换为另一种形式的过程</p></li><li><p><strong>解码（decode）</strong>：编码的逆过程</p></li><li><p><strong>字符集（character set、charset）</strong></p></li><li><p><strong>字符编码（character encoding）</strong>：将字符集中的字符按一定方式编码为某指定集合中的某一对象的过程。</p></li><li><p><strong>字符编码模型（character encoding model）</strong>：反应字符编码系统的构成特点和个构成部分之间相互关系的模型框架。</p><ul><li>ASCII：传统字符编码模型。将字符集中的字符进行编号，编号就是该字符的编码</li><li>统一码（Unicode）、通用字符集（UCS）：现代字符编码模型</li></ul><blockquote><p>现代字符编码模型：</p><ol><li>有哪些字符</li><li>这些字符的编号是什么</li><li>这些编号如何编码成一系列逻辑层面有限大小的数字，即<strong>码元序列</strong></li><li>这些逻辑层面的码元序列如何转换为（即映射为）物理层面的<strong>字节序列(即字节流)</strong></li><li>在某些特殊的传输环境中（比如Email中），再进一步将字节序列进行适应性编码处理</li></ol><p> </p><p>核心思想：创建一个能够用<strong>不同方式</strong>来编码的<strong>通用</strong>字符集</p></blockquote></li></ul><h2 id="_2-现代字符编码模型" tabindex="-1"><a class="header-anchor" href="#_2-现代字符编码模型" aria-hidden="true">#</a> 2. 现代字符编码模型</h2><p>现代字符编码模型分为了5个层次：</p><h3 id="_2-1-抽象字符表-acr-abstract-character-repertoire" tabindex="-1"><a class="header-anchor" href="#_2-1-抽象字符表-acr-abstract-character-repertoire" aria-hidden="true">#</a> 2.1 抽象字符表（ACR, Abstract Character Repertoire）</h3><blockquote><p>明确字符的范围（即确定支持哪些字符）</p></blockquote><ul><li><p>无序</p></li><li><p>不同于具有特定字型的“具体”字符，“抽象”字符不具有特定的字形。</p></li><li><p>字符表可以是封闭的（如ASCII字符表、ISO/IEC 8859系列），也可以是开放的（如 Unicode、Code Page 代码页）</p></li></ul><h3 id="_2-2-编号字符集-ccs-coded-character-set" tabindex="-1"><a class="header-anchor" href="#_2-2-编号字符集-ccs-coded-character-set" aria-hidden="true">#</a> 2.2 编号字符集（CCS, Coded Character Set）</h3><blockquote><p>用数字编号表示字符（即用数字给抽象字符表ACR中的字符进行编号），CCS 常简称为字符集</p></blockquote>',9),m=s("ul",null,[s("li",null,[s("p",null,"将抽象字符表 SCR 中的每个抽象字符表示为 1 个非负整数 N 或者映射到 1 个坐标（非负整数值对 x, y），映射的结果就是编号字符集 CCS。")]),s("li",null,[s("p",null,[a("由此产生了"),s("strong",null,"编号空间（code space）"),a("，一般翻译为"),s("strong",null,"代码空间"),a("、"),s("strong",null,"码空间"),a("、"),s("strong",null,"码点空间")]),s("p",null,"编号空间可以用以下方式进行描述"),s("ul",null,[s("li",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mo",{stretchy:"false"},"("),s("mi",null,"x"),s("mo",{separator:"true"},","),s("mi",null,"y"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"(x, y)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"x"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"y"),s("span",{class:"mclose"},")")])])]),a("：GB2312的汉字编号空间是94 x 94")]),s("li",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"N")]),s("annotation",{encoding:"application/x-tex"},"N")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N")])])]),a("：ISO-8859-1的编号空间是256")]),s("li",null,[a("存储单元尺寸：ISO-8859-1是一个8比特的编号空间（"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msup",null,[s("mn",null,"2"),s("mn",null,"8")]),s("mo",null,"="),s("mn",null,"256")]),s("annotation",{encoding:"application/x-tex"},"2^{8}=256")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8141em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"8")])])])])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"256")])])]),a("）")]),s("li",null,"子集：如行、列、面（Plane平面、层面）等等")])]),s("li",null,[s("p",null,[s("strong",null,"码点（code point 或 code position）"),a("：码点空间中的位置")]),s("p",null,"还经常会用“码点”来指代“码点值”，需要根据上下文进行判断")]),s("li",null,[s("p",null,[s("strong",null,"码点值（或码点编号）"),a("：一个字符占用的码点所在的坐标或非负整数，即该字符的编号")]),s("p",null,[a("在 Unicode 编码方案中，字符码点又称为 "),s("strong",null,"Unicode 标量值（Unicode Scalar Value）")])])],-1),d=s("div",{class:"hint-container info"},[s("p",{class:"hint-container-title"},"字符编号不完全等同于码点编号（即码点值）"),s("p",null,"一般编号字符集 CCS 里的码点数量要大于抽象字符表 ACR 中的字符数量。 在编号字符集中，除了字符码点之外，还有非字符码点和保留码点")],-1),u=s("p",null,"在 Unicode 标准中，一个抽象字符可能对应多个码点，也可能使用多个码点组成的序列来表示。",-1),g=s("p",null,[a("如码点编号为U+51C9与U+F979的这两个码点实际上是同一个字符“凉”，这是为了兼容韩国字符集标准KS X 1001:1998。再如 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mover",{accent:"true"},[s("mi",null,"a"),s("mo",null,"ˋ")])]),s("annotation",{encoding:"application/x-tex"},"\\grave{a}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6944em"}}),s("span",{class:"mord accent"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.6944em"}},[s("span",{style:{top:"-3em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord mathnormal"},"a")]),s("span",{style:{top:"-3em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"accent-body",style:{left:"-0.25em"}},[s("span",{class:"mord"},"ˋ")])])])])])])])])]),a("，由码点编号为U+0061的基本字符字母 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"a")]),s("annotation",{encoding:"application/x-tex"},"a")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.4306em"}}),s("span",{class:"mord mathnormal"},"a")])])]),a(" 和码点编号为U+0300的组合字符读音符号 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mover",{accent:"true"},[s("mrow"),s("mo",null,"ˋ")])]),s("annotation",{encoding:"application/x-tex"},"\\grave{}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6944em"}}),s("span",{class:"mord accent"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.6944em"}},[s("span",{style:{top:"-3em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"})]),s("span",{style:{top:"-3em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"accent-body",style:{left:"-0.25em"}},[s("span",{class:"mord"},"ˋ")])])])])])])])])]),a(" 所共同组成。")],-1),x=t('<h3 id="_2-3-字符编码方式-形式-格式-规则-cef-character-encoding-form" tabindex="-1"><a class="header-anchor" href="#_2-3-字符编码方式-形式-格式-规则-cef-character-encoding-form" aria-hidden="true">#</a> 2.3 字符编码方式/形式/格式/规则（CEF, Character Encoding Form）</h3><blockquote><p>将字符编号编码为逻辑上的码元序列（即逻辑字符编码）</p><p>也被称为<strong>存储格式（Storage Format）</strong></p></blockquote><ul><li><p>以 Unicode 为例，它的 CCS 所需的码点数量赎回不断增加的，而计算机所能表示的整数范围却是有限的。如何通过相对有限的整型数来可扩展地表示可能会无限增长的字符数量？对于 ASCII 字符编码等早期广泛应用的编码方案，如何做兼容？这就是 CEF 要解决的问题。</p><p>CEF 就是将 CCS 中的<strong>码点值（码点编号、字符编号）<strong>转化成有限比特长度的</strong>编码值（字符编码）</strong>。</p></li><li><p>这个<strong>编码值</strong>是码元的序列（code unit sequence）。</p><p><strong>码元（code unit）</strong></p></li><li><p>CEF 虽然也被称为存储格式，但是它只涉及逻辑层面、与特定的计算机系统平台无关的编码方式，尚未涉及到物理层面上、与特定计算机系统平台有关的存储方式</p><p>UTF-8、UTF-16、UTF-32 等，都是 Unicode 字符集（编号字符集 CCS）常用的字符编码方式（CEF）</p></li></ul><h3 id="_2-4-字符编码模式ces-ces-character-encoding-scheme" tabindex="-1"><a class="header-anchor" href="#_2-4-字符编码模式ces-ces-character-encoding-scheme" aria-hidden="true">#</a> 2.4 字符编码模式CES（CES, Character Encoding Scheme）</h3><blockquote><p>将逻辑上的码元序列映射为物理上的字节序列（字节流，即物理字符编码）</p><p>也称作<strong>序列化模式（Serialization Format）</strong></p><p>经过编码后的字符能在计算机中进行处理、存储和传输</p></blockquote><ul><li><p>CEF 是跟特定计算机系统平台无关的<strong>逻辑意义</strong>上的编码过程，而 CES 就属于跟特定计算机系统平台有关的<strong>物理意义</strong>上的编码过程。</p></li><li><p>由于硬件平台与操作系统设计上的历史原因，对于U TF-16、UTF-32 等采用多字节码元的编码方式而言，必须使用一个原先称之为**零宽度不中断空格(ZERO WIDTH NO-BREAK SPACE)**的字符（Unicode字符编号为 0xFEFF，用来指定字节序 （Byte-Order 或 Endianness，也称字节顺序、位元组顺序），是大端序还是小端序），计算机才能够正确地进行处理、存储和传输。</p><p>对于 UTF-8 这种采用单字节码元的编码方式来说，并不存在字节序问题，无需指明字节序。所以在各种计算机系统平台中，UTF-8 编码的码元序列与字节序列都是相同的。</p></li><li><p>编码（encode）可能指 CEF 也可能是指 CES，解码（decode）也存在对应的两种可能。</p><p>编码（encoding）就相应的可能指<strong>码元序列</strong>，也可能指<strong>字节序列</strong>。</p></li><li><p>程序员更多接触到的是 CES 将码元序列进一步编码所形成的 <strong>字节序列</strong>，这是物理意义上的最终编码</p><p>通过 CEF 编码后得到的码元序列，更多的是逻辑意义上的中间编码，一般不和它直接打交道。</p><p>第五层的 TES 所形成的编码用于某些特殊的传输环境，打交道机会也比较少。</p></li></ul><h3 id="_2-5-传输编码语法-tes-transfer-encoding-syntax" tabindex="-1"><a class="header-anchor" href="#_2-5-传输编码语法-tes-transfer-encoding-syntax" aria-hidden="true">#</a> 2.5 传输编码语法（TES, Transfer Encoding Syntax）</h3><blockquote><p>用将字节序列作进一步的适应性编码处理</p></blockquote><p>在某些特殊传输环境中，需要对 CES 所提供的字节序列（字节流）进一步进行<strong>适应性编码</strong>。一般有两种处理方式：</p><ol><li><p>把字节序列映射到一套更受限制的值域内，以满足该特殊环境的限制。</p><p>如用于 Email 传输的 Base64 编码或者 quoted-printable 编码（即可打印字符引用编码），都是把8位的字节映射为7位长的数据。</p><blockquote><p>Email 协议的设计仅能传输 7 位 ASCII 字符。</p></blockquote></li><li><p>压缩字节序列的值</p><p>如 LZW 或者进程长度编码等无损压缩技术。</p></li></ol><h3 id="_2-6-小结" tabindex="-1"><a class="header-anchor" href="#_2-6-小结" aria-hidden="true">#</a> 2.6 小结</h3><p>同一个字符，因多个不同的字符编码方式 CEF（如 UTF-8、UTF-16、UTF-32 等），会有不同的<strong>码元序列（Code Unit Sequence）</strong></p><p>同一个码元序列，因 2 个不同的字符编码模式 CES（大端、小端），可能具有 2 个不同的<strong>字节序列（Byte Sequence）</strong></p><p>不同的<strong>码元序列</strong>或是<strong>字节序列</strong>，只要表示的是同一个字符，name对应的**码点值（码点编号、字符编号）**一般都是相同的（在Unicode标准中，为了与其它标准兼容，有少数字符可能与多个码点对应）</p>',14);function b(C,y){const e=n("ExternalLinkIcon");return o(),r("div",null,[s("p",null,[a("本系列文章是对"),s("a",p,[a("知乎专栏「刨根问底字符编码」"),i(e)]),a(" 的学习记录。")]),h,m,d,u,g,x])}const w=l(c,[["render",b],["__file","Chapter1.html.vue"]]);export{w as default};
