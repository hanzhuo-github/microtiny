import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as e,o as c,c as p,b as s,d as n,e as t,w as r,f as a}from"./app-4ed637ae.js";const d={},u=a('<h2 id="七种类型" tabindex="-1"><a class="header-anchor" href="#七种类型" aria-hidden="true">#</a> 七种类型</h2><ul><li>Undefined</li><li>Null</li><li>Boolean</li><li>String</li><li>Number</li><li>Symbol</li><li>Object</li></ul><h2 id="_1-undefined、null" tabindex="-1"><a class="header-anchor" href="#_1-undefined、null" aria-hidden="true">#</a> 1. Undefined、Null</h2><blockquote><p><strong>Q</strong>：为什么有的编程规范要求用 <code>void 0</code> 代替 <code>undefined</code>？<br><strong>A</strong>：局部变量中的 <code>undefined</code> 可以修改（ES5 之后全局变量下的 <code>undefined</code> 只读），为了避免它在无意中被修改，建议使用 <code>void 0</code> 来获取 <code>undefined</code> 值。</p></blockquote>',4),m={id:"_2-string",tabindex:"-1"},h=s("a",{class:"header-anchor",href:"#_2-string","aria-hidden":"true"},"#",-1),b={href:"https://javascript.info/string",target:"_blank",rel:"noopener noreferrer"},g=s("blockquote",null,[s("p",null,[s("strong",null,"Q"),n("：字符串是否有最大长度？"),s("br"),s("strong",null,"A"),n("：String 的最大长度是 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msup",null,[s("mn",null,"2"),s("mn",null,"53")]),s("mo",null,"−"),s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"2^{53}-1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8974em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"53")])])])])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])])])],-1),f=s("p",null,"String并非“字符串”，而是是字符串的 UTF16 编码，对 String 的各种操作如 charAt、charCodeAt、length 等，针对的都是 UTF-16 编码，每个 UTF-16 单元被认为是 1 个字符（处理 SP 平面的字符时要注意，SP 上的每个字符对应 4 字节）。所以字符串的最大长度实际上是受字符串的编码长度影响的。",-1),k=s("p",null,"JavaScrip 中的 String 永远无法变更，即字符串具有值类型的特征。",-1),v=s("h2",{id:"_3-number",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_3-number","aria-hidden":"true"},"#"),n(" 3. Number")],-1),_=s("p",null,[n("Number 共有 18437736874454810627(即 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msup",null,[s("mn",null,"2"),s("mn",null,"64")]),s("mo",null,"−"),s("msup",null,[s("mn",null,"2"),s("mn",null,"53")]),s("mo",null,"+"),s("mn",null,"3")]),s("annotation",{encoding:"application/x-tex"},"2^{64}-2^{53}+3")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8974em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"64")])])])])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8974em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"53")])])])])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"3")])])]),n(") 个值。")],-1),y=a(`<div class="hint-container tip"><p class="hint-container-title">提示</p><p>Number 用 64 位表示。</p><p>IEEE 754 标准： s（符号位，1）+ e（指数位，11）+ f（尾数，52）</p><p>e 全 1 时的特殊值减掉（即 64 - 11 = 53），+3 是指三个特殊值：NaN、Infinity、-Infinity</p><ul><li>NaN：e 全 1，f 非 0</li><li>Infinity：e 全 1，f = 0，正无穷（S 为 0），负无穷（S 为 1）</li></ul></div><p>JavaScript 中的 Number 类型基本符合 IEEE 754-2008 规定的双精度浮点数规则，但是 JavaScript 为了表达几个额外的语言场景（比如不让除以 0 出错，而引入了无穷大的概念），规定了几个例外情况：</p><ul><li>NaN，占用了 9007199254740990，这原本是符合 IEEE 规则的数字</li><li>Infinity，无穷大</li><li>Infinity，负无穷大</li></ul><p>JavaScript 中有 +0 和 -0，区分他们的方法是检验 1/x 是 Infinity 还是 -Infinity</p><p>整数范围：-0x1f ffff ffff ffff 至 0x1f ffff ffff ffff</p><p>浮点数精度问题：0.1 + 0.2 != 0.3</p><p>正确的比较方法应该是使用 JavaScript 提供的最小精度：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span> <span class="token operator">-</span> <span class="token number">0.3</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> Number<span class="token punctuation">.</span><span class="token constant">EPSILON</span>    <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,8),S={id:"_4-symbol",tabindex:"-1"},x=s("a",{class:"header-anchor",href:"#_4-symbol","aria-hidden":"true"},"#",-1),N=a('<p>对象的 key 只能是 String 类型或 Symbol 类型。使用字符串做 key 容易造成属性名的冲突，ES 6 引入 Symbol 正是为了防止属性名冲突的。</p><p>即使 description 相同，Symbol 也是不同的。</p><p>使用 JavaScript 内置的 <code>Symbol.*</code> 修改对象的内建行为。</p><h2 id="_5-object" tabindex="-1"><a class="header-anchor" href="#_5-object" aria-hidden="true">#</a> 5. Object</h2><p>对于 JavaScript 中的几个基本类型，都在对象类型中有所对应，分别是</p><ul><li>Number</li><li>String</li><li>Boolean</li><li>Symbol</li></ul><p>要注意，<code>new Number(3)</code> 和数字 <code>3</code> 是不同的类型，前者是对象类型，后者是 Number 类型</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">;</span>     <span class="token comment">// true</span>\n<span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token comment">// false</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Number、String、Boolean 当跟 new 搭配时，是对应类型的构造器，会产生对象；直接调用表示强制类型转换。</p><p>Symbol 是 Symbol 对象构造器，但是用 new 调用会抛出错误。</p><h2 id="_6-类型转换" tabindex="-1"><a class="header-anchor" href="#_6-类型转换" aria-hidden="true">#</a> 6. 类型转换</h2><p><code>==</code> 运算会进行跨类型的比较，规则复杂。一般被认为是设计失误，很多实践中推荐禁止使用 <code>==</code>，而是要求进行显示转换后用 <code>===</code> 进行比较。</p><h3 id="_6-1-stringtonumber-number-str" tabindex="-1"><a class="header-anchor" href="#_6-1-stringtonumber-number-str" aria-hidden="true">#</a> 6.1 StringToNumber: <code>Number(str)</code></h3><p>数字（十进制、二进制、八进制、十六进制 &amp; 科学计数法 E 或 e）：</p><ul><li>30</li><li>0b111</li><li>0c13</li><li>0xFF</li><li>1e3</li><li>-1e-2</li></ul><div class="hint-container warning"><p class="hint-container-title">使用 `Number()` 而非 `parseInt()`、`parseFloat`</p><ul><li><code>parseInt</code> 只支持十六进制前缀“0x”，忽略非数字字符，不支持科学计数法 <ul><li>在比较旧的浏览器中，<code>parseInt</code> 还支持 0 开头的八进制前缀，这会造成错误。所以不论何时，都建议传入 <code>parseInt</code> 的第二个参数</li></ul></li><li><code>parseFloat</code> 直接把字符串作为十进制进行解析，不能处理其他任何进制</li></ul></div><h3 id="_6-2-numbertostring-string-num" tabindex="-1"><a class="header-anchor" href="#_6-2-numbertostring-string-num" aria-hidden="true">#</a> 6.2 NumberToString: <code>String(num)</code></h3><ul><li>在较小范围内，数字转字符串完全符合你的直觉</li><li>在 Number 的绝对值较大或较小时，字符串表示是用科学计数法</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token number">10000000000000000</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 10000000000000000</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 1e+25</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-3-object-to-primitive-conversion-对象-基本类型的转换-拆箱转换" tabindex="-1"><a class="header-anchor" href="#_6-3-object-to-primitive-conversion-对象-基本类型的转换-拆箱转换" aria-hidden="true">#</a> 6.3 Object to primitive conversion 对象-&gt;基本类型的转换（拆箱转换）</h3><ul><li>布尔转换：没有对应的转换。所有的对象都是 <code>true</code>。</li><li>数值转换：当进行数学运算时进行数值转换。例如，<code>Date</code> 对象可以相减。</li><li>字符串转换：一般在输出的时候进行。比如 <code>alert(obj)</code>、<code>console.log(obj)</code> 等。</li></ul><p>我们可以使用特殊的对象方法来实现字符串和数值转换。</p><p>ToFdo</p><h3 id="_6-4-基本类型-对象的转换-装箱转换" tabindex="-1"><a class="header-anchor" href="#_6-4-基本类型-对象的转换-装箱转换" aria-hidden="true">#</a> 6.4 基本类型-&gt;对象的转换（装箱转换）</h3><p>Todo</p>',25);function w(j,I){const l=e("ExternalLinkIcon"),i=e("RouterLink");return c(),p("div",null,[u,s("h2",m,[h,n(" 2. "),s("a",b,[n("String"),t(l)])]),g,f,k,v,_,y,s("h2",S,[x,n(" 4. "),t(i,{to:"/post/Symbol.html"},{default:r(()=>[n("Symbol")]),_:1})]),N])}const T=o(d,[["render",w],["__file","variable-type.html.vue"]]);export{T as default};
