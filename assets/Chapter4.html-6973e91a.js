import{_ as d}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o as r,c as u,d as n,e as a,f as o,w as s,b as l}from"./app-e50f947d.js";const m={},g={href:"https://huggingface.co/",target:"_blank",rel:"noopener noreferrer"},k=n("p",null,"其中的模型不局限于 🤗 Transformers 或者 NLP。你可以自己去探索。",-1),h=n("p",null,"模型都用 Git 进行托管，允许版本控制和重现。另外，在 Hub 上共享模型会自动为该模型部署托管的推理 API。",-1),b=n("h2",{id:"_1-使用预训练模型",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-使用预训练模型","aria-hidden":"true"},"#"),a(" 1. 使用预训练模型")],-1),v=n("p",null,"如我们要使用 camembert-base checkpoints.",-1),_=n("div",{class:"language-python line-numbers-mode","data-ext":"py"},[n("pre",{class:"language-python"},[n("code",null,[n("span",{class:"token comment"},"# 使用 pipeline"),a(`
`),n("span",{class:"token keyword"},"from"),a(" transformers "),n("span",{class:"token keyword"},"import"),a(` pipeline

camembert_fill_mask `),n("span",{class:"token operator"},"="),a(" pipeline"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"fill-mask"'),n("span",{class:"token punctuation"},","),a(" model"),n("span",{class:"token operator"},"="),n("span",{class:"token string"},'"camembert-base"'),n("span",{class:"token punctuation"},")"),a(`
results `),n("span",{class:"token operator"},"="),a(" camembert_fill_mask"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Le camembert est <mask> :)"'),n("span",{class:"token punctuation"},")"),a(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),f=n("div",{class:"language-python line-numbers-mode","data-ext":"py"},[n("pre",{class:"language-python"},[n("code",null,[n("span",{class:"token comment"},"# 直接使用 model architecture"),a(`
`),n("span",{class:"token keyword"},"from"),a(" transformers "),n("span",{class:"token keyword"},"import"),a(" CamembertTokenizer"),n("span",{class:"token punctuation"},","),a(` CamembertForMaskedLM

tokenizer `),n("span",{class:"token operator"},"="),a(" CamembertTokenizer"),n("span",{class:"token punctuation"},"."),a("from_pretrained"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"camembert-base"'),n("span",{class:"token punctuation"},")"),a(`
model `),n("span",{class:"token operator"},"="),a(" CamembertForMaskedLM"),n("span",{class:"token punctuation"},"."),a("from_pretrained"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"camembert-base"'),n("span",{class:"token punctuation"},")"),a(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),y=n("div",{class:"language-python line-numbers-mode","data-ext":"py"},[n("pre",{class:"language-python"},[n("code",null,[n("span",{class:"token comment"},"# 推荐使用 Auto* Class，因为这种实现与 architecture 无关"),a(`
`),n("span",{class:"token keyword"},"from"),a(" transformers "),n("span",{class:"token keyword"},"import"),a(" AutoTokenizer"),n("span",{class:"token punctuation"},","),a(` AutoModelForMaskedLM

tokenizer `),n("span",{class:"token operator"},"="),a(" AutoTokenizer"),n("span",{class:"token punctuation"},"."),a("from_pretrained"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"camembert-base"'),n("span",{class:"token punctuation"},")"),a(`
model `),n("span",{class:"token operator"},"="),a(" AutoModelForMaskedLM"),n("span",{class:"token punctuation"},"."),a("from_pretrained"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"camembert-base"'),n("span",{class:"token punctuation"},")"),a(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),x=l('<div class="hint-container tip"><p class="hint-container-title">提示</p><p>使用预训练模型时，可以在 model card 中查看它是如何训练的，在哪些数据集上训练的，局限性和 bias 。</p></div><h2 id="_2-共享预训练模型" tabindex="-1"><a class="header-anchor" href="#_2-共享预训练模型" aria-hidden="true">#</a> 2. 共享预训练模型</h2><p>创建模型仓库的三种方法：</p><ul><li>使用 <code>push_to_hub</code> API</li><li>使用 <code>huggingface_hub</code> python 库</li><li>在 web 页面上创建</li></ul><p>创建好仓库后，就可以通过 git 或者 git-lfs 上传文件了。</p><h3 id="_2-1-创建模型仓库" tabindex="-1"><a class="header-anchor" href="#_2-1-创建模型仓库" aria-hidden="true">#</a> 2.1 创建模型仓库</h3><h4 id="_2-1-1-使用-push-to-hub-api" tabindex="-1"><a class="header-anchor" href="#_2-1-1-使用-push-to-hub-api" aria-hidden="true">#</a> 2.1.1 使用 <code>push_to_hub</code> API</h4><p>你需要身份令牌一遍 huggingface_hub 知道你的权限。</p>',8),q=n("div",{class:"language-python line-numbers-mode","data-ext":"py"},[n("pre",{class:"language-python"},[n("code",null,[n("span",{class:"token keyword"},"from"),a(" huggingface_hub "),n("span",{class:"token keyword"},"import"),a(` notebook_login

notebook_login`),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),a(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),w=n("div",{class:"language-python line-numbers-mode","data-ext":"py"},[n("pre",{class:"language-python"},[n("code",null,[a("huggingface"),n("span",{class:"token operator"},"-"),a(`cli login
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),z=l(`<p>如果你使用 Trainer API 训练模型，将模型上传至 Hub 最简单的方式就是在定义 TrainerArguments 时配置 <code>push_to_hub=True</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> transformers <span class="token keyword">import</span> TrainerArguments

training_args <span class="token operator">=</span> TrainerArguments<span class="token punctuation">(</span>
    <span class="token string">&quot;bert-finetuned-mrpc&quot;</span><span class="token punctuation">,</span> save_strategy<span class="token operator">=</span><span class="token string">&quot;epoch&quot;</span><span class="token punctuation">,</span> push_to_hub<span class="token operator">=</span><span class="token boolean">True</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当你调用 <code>trainer.train()</code> 时，Trainer 会在每次保存 model 时（按照上面的配置，是每个 epoch）将你的 model 上传到 Hub 中对应的仓库上。仓库名称为你选择的输出路径（如上面的 bert-finetuned-mrpc），你也可以用 <code>hub_model_id=&quot;a_different_name&quot;</code> 来设置不同的名称。如果要将 model 上传到你所在的组织下，你可以使用 <code>hub_model_id=&quot;my_organization/mu_repo_name&quot;</code>。</p><p>训练结束后，使用 <code>trainer.push_to_hub()</code> 上传最后一版 model。它会生成 model card。</p><p>在较低层的实现中，我们可以直接通过 models、tokenizers、configuration 对象的 <code>push_to_hub()</code> 方法来访问 Model Hub。这种方式既可以创建仓库，又能将 model 和 tokenizer 文件直接推到仓库中。</p><p>首先创建 model 和 tokenizer。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> transformers <span class="token keyword">import</span> AutoModelForMaskedLM<span class="token punctuation">,</span> AutoTokenizer

checkpoint <span class="token operator">=</span> <span class="token string">&quot;camembert-base&quot;</span>

model <span class="token operator">=</span> AutoModelForMaskedLM<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span>checkpoint<span class="token punctuation">)</span>
tokenizer <span class="token operator">=</span> AutoTokenizer<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span>checkpoint<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你可以训练模型、对模型进行微调、向 tokenizer 中增加 tokens。做完你想做的事情时候，你可以使用 <code>push_to_hub()</code> 将 model 推到仓库中</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>model<span class="token punctuation">.</span>push_to_hub<span class="token punctuation">(</span><span class="token string">&quot;dummy-model&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这将会创建名为 dummy-model 的仓库，其中会填上你的 model 文件。</p><p>同样，对 tokenizer 也可做同样的操作。现在你的仓库中有了全部所需的文件。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>tokenizer<span class="token punctuation">.</span>push_to_hub<span class="token punctuation">(</span><span class="token string">&quot;dummy-model&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果你想将仓库放到组织下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>tokenizer<span class="token punctuation">.</span>push_to_hub<span class="token punctuation">(</span><span class="token string">&quot;dummy-model&quot;</span><span class="token punctuation">,</span> organization<span class="token operator">=</span><span class="token string">&quot;huggingface&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果你想使用某个特定的 Hugging Face token：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>tokenizer<span class="token punctuation">.</span>push_to_hub<span class="token punctuation">(</span><span class="token string">&quot;dummy-model&quot;</span><span class="token punctuation">,</span> organization<span class="token operator">=</span><span class="token string">&quot;huggingface&quot;</span><span class="token punctuation">,</span> use_auth_token<span class="token operator">=</span><span class="token string">&quot;&lt;TOKEN&gt;&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-1-2-使用-huggingface-hub-python-库" tabindex="-1"><a class="header-anchor" href="#_2-1-2-使用-huggingface-hub-python-库" aria-hidden="true">#</a> 2.1.2 使用 <code>huggingface_hub</code> python 库</h4><p>你需要使用 CLI 的登录命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>huggingface-cli login
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>huggingface_hub 库提供了很多方法和类。下面是和仓库创建、删除等有关的方法</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> huggingface_hub <span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token comment"># User management</span>
    login<span class="token punctuation">,</span>
    logout<span class="token punctuation">,</span>
    whoami<span class="token punctuation">,</span>

    <span class="token comment"># Repository creation and management</span>
    create_repo<span class="token punctuation">,</span>
    delete_repo<span class="token punctuation">,</span>
    update_repo_visibility<span class="token punctuation">,</span>

    <span class="token comment"># And some methods to retrieve/change information about the content</span>
    list_models<span class="token punctuation">,</span>
    list_datasets<span class="token punctuation">,</span>
    list_metrics<span class="token punctuation">,</span>
    list_repo_files<span class="token punctuation">,</span>
    upload_file<span class="token punctuation">,</span>
    delete_file<span class="token punctuation">,</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 创建仓库</span>
<span class="token keyword">from</span> huggingface_hub <span class="token keyword">import</span> create_repo

create_repo<span class="token punctuation">(</span><span class="token string">&quot;dummy-model&quot;</span><span class="token punctuation">)</span>
<span class="token comment"># 可以指定 organization</span>
<span class="token comment"># create_repo(&quot;dummy-model&quot;, organization=&quot;huggingface&quot;)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了可以指定 organization，还有一些参数：</p><ul><li>private: 是否对其他人可见</li><li>token: 是否想用给定的 token 覆盖缓存中的 token</li><li>repo_type: 是都要创建 dataset 或 space（而非创建 model）。接受的值可以是 “dataset” 或 “space”</li></ul><h4 id="_2-1-3-使用-web-页面" tabindex="-1"><a class="header-anchor" href="#_2-1-3-使用-web-页面" aria-hidden="true">#</a> 2.1.3 使用 web 页面</h4><p>这里不展开介绍，按照页面提示进行即可。</p><h3 id="_2-2-上传-model-files" tabindex="-1"><a class="header-anchor" href="#_2-2-上传-model-files" aria-hidden="true">#</a> 2.2 上传 model files</h3><p>Hugging Face Hub 的文件管理系统基于 git（对于 regular files）和 git-lfs（对于大文件，large file storage）。</p><p>下面我们将介绍三种上传文件到 Hub 的方法。</p><h4 id="_2-3-1-upload-file-方法" tabindex="-1"><a class="header-anchor" href="#_2-3-1-upload-file-方法" aria-hidden="true">#</a> 2.3.1 <code>upload_file</code> 方法</h4><p>使用 <code>upload_file()</code> 不需要 git 或 git-lfs，它使用 http post 请求将文件直接传到 🤗 Hub。但是它没有办法处理 5GB 以上的文件。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> huggingface_hub <span class="token keyword">import</span> upload_file

upload_file<span class="token punctuation">(</span>
    <span class="token string">&quot;&lt;path_to_file&gt;/config.json&quot;</span><span class="token punctuation">,</span>
    path_in_repo<span class="token operator">=</span><span class="token string">&quot;config.json&quot;</span><span class="token punctuation">,</span>
    repo_id<span class="token operator">=</span><span class="token string">&quot;&lt;namespace&gt;/dummy-model&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还有一些其他的参数：</p><ul><li>token</li><li>repo_type</li></ul><h4 id="_2-3-2-repository-类" tabindex="-1"><a class="header-anchor" href="#_2-3-2-repository-类" aria-hidden="true">#</a> 2.3.2 <code>Repository</code> 类</h4><p><code>Repository</code> 类以于 git 的方式管理本地仓库。使用该类需要安装 git 和 git-lfs</p>`,36),A={class:"hint-container details"},M=n("summary",null,"安装 git-lfs",-1),T={href:"https://git-lfs.com/",target:"_blank",rel:"noopener noreferrer"},L=n("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[n("pre",{class:"language-bash"},[n("code",null,[n("span",{class:"token function"},"curl"),a(),n("span",{class:"token parameter variable"},"-s"),a(" https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh "),n("span",{class:"token operator"},"|"),a(),n("span",{class:"token function"},"sudo"),a(),n("span",{class:"token function"},"bash"),a(`
`),n("span",{class:"token function"},"sudo"),a(),n("span",{class:"token function"},"apt-get"),a(),n("span",{class:"token function"},"install"),a(` git-lfs
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),j=n("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[n("pre",{class:"language-bash"},[n("code",null,[a("brew "),n("span",{class:"token function"},"install"),a(` git-lfs
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),F=l(`<p>:::</p><p>我们使用刚刚建好的仓库。首先我们克隆远端仓库：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> huggingface_hub <span class="token keyword">import</span> Repository

repo <span class="token operator">=</span> Repository<span class="token punctuation">(</span><span class="token string">&quot;&lt;path_to_dummy_folder&gt;&quot;</span><span class="token punctuation">,</span> clone_from<span class="token operator">=</span><span class="token string">&quot;&lt;namespace&gt;/dummy-model&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这将在本地创建文件夹&lt;path_to_dummy_folder&gt;。该文件夹中包含 .gitattributes 文件。</p>`,4),C={href:"https://github.com/huggingface/huggingface_hub/tree/main/src/huggingface_hub#advanced-programmatic-repository-management",target:"_blank",rel:"noopener noreferrer"},H=l(`<div class="language-python" data-ext="py"><pre class="language-python"><code>repo<span class="token punctuation">.</span>git_pull<span class="token punctuation">(</span><span class="token punctuation">)</span>
repo<span class="token punctuation">.</span>git_add<span class="token punctuation">(</span><span class="token punctuation">)</span>
repo<span class="token punctuation">.</span>git_commit<span class="token punctuation">(</span><span class="token punctuation">)</span>
repo<span class="token punctuation">.</span>git_push<span class="token punctuation">(</span><span class="token punctuation">)</span>
repo<span class="token punctuation">.</span>git_tag<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div><p>现在我们有想要推到 Hub 上的 model 和 tokenizer，并成功 clone 了仓库。</p><p>首先，确保我们本地 clone 的版本是最新的：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>repo<span class="token punctuation">.</span>git_pull<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后我们就可以保存 model 和 tokenizer files 了：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>model<span class="token punctuation">.</span>save_pretrained<span class="token punctuation">(</span><span class="token string">&quot;&lt;path_to_dummy_folder&gt;&quot;</span><span class="token punctuation">)</span>
tokenizer<span class="token punctuation">.</span>save_pretrained<span class="token punctuation">(</span><span class="token string">&quot;&lt;path_to_dummy_folder&gt;&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>目前，&lt;path_to_dummy_folder&gt; 中包含了全部的 model 和 tokenizer files。接下来可以使用传统的 git 工作流将他们推到远端 hub：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>repo<span class="token punctuation">.</span>git_add<span class="token punctuation">(</span><span class="token punctuation">)</span>
repo<span class="token punctuation">.</span>git_commit<span class="token punctuation">(</span><span class="token string">&quot;Add model and tokenizer files&quot;</span><span class="token punctuation">)</span>
repo<span class="token punctuation">.</span>git_push<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-3-3-git-based-方法" tabindex="-1"><a class="header-anchor" href="#_2-3-3-git-based-方法" aria-hidden="true">#</a> 2.3.3 <code>git-based</code> 方法</h4><p>直接使用 git 和 git-lfs 来上传文件。请确保安装了 git 和 git-lfs。</p><p>首先，初始化 git-lfs</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> lfs <span class="token function">install</span>
</code></pre></div><p>接下来，第一步是克隆 model 仓库：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> clone https://huggingface.co/<span class="token operator">&lt;</span>namespace<span class="token operator">&gt;</span>/<span class="token operator">&lt;</span>your-model-id<span class="token operator">&gt;</span>
</code></pre></div><p>例如，我的 username 是 hanzhuo，使用的 model name 是 dummy-model</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> clone https://huggingface.co/hanzhuo/dummy-model
</code></pre></div><p>现在我的工作路径中有一个 dummy-model 文件夹，</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> dummy-model <span class="token operator">&amp;&amp;</span> <span class="token function">ls</span>
</code></pre></div><p>可以使用 git 来添加小文件，对于大文件，需要使用 git-lfs。</p><p>回顾一下之前获得 model 和 tokenizer 的方式：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> transformers <span class="token keyword">import</span> AutoModelForMaskedLM<span class="token punctuation">,</span> AutoTokenizer

checkpoint <span class="token operator">=</span> <span class="token string">&quot;camembert-base&quot;</span>

model <span class="token operator">=</span> AutoModelForMaskedLM<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span>checkpoint<span class="token punctuation">)</span>
tokenizer <span class="token operator">=</span> AutoTokenizer<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span>checkpoint<span class="token punctuation">)</span>

<span class="token comment"># Do whatever with the model, train it, fine-tune it...</span>

model<span class="token punctuation">.</span>save_pretrained<span class="token punctuation">(</span><span class="token string">&quot;&lt;path_to_dummy_folder&gt;&quot;</span><span class="token punctuation">)</span>
tokenizer<span class="token punctuation">.</span>save_pretrained<span class="token punctuation">(</span><span class="token string">&quot;&lt;path_to_dummy_folder&gt;&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们看一下 dummy-model 下的文件目录：</p><div class="language-text" data-ext="text"><pre class="language-text"><code>config.json  pytorch_model.bin  README.md  sentencepiece.bpe.model  special_tokens_map.json tokenizer_config.json  tokenizer.json
</code></pre></div><p>如果使用 <code>ls -lh</code> 命令，可以发现 pytorch_model.bin 的大小超过了 400MB。</p><p>接下来使用常规的 git 命令：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>
<span class="token function">git</span> status
</code></pre></div><div class="language-text" data-ext="text"><pre class="language-text"><code>On branch main
Your branch is up to date with &#39;origin/main&#39;.

Changes to be committed:
  (use &quot;git restore --staged &lt;file&gt;...&quot; to unstage)
  modified:   .gitattributes
	new file:   config.json
	new file:   pytorch_model.bin
	new file:   sentencepiece.bpe.model
	new file:   special_tokens_map.json
	new file:   tokenizer.json
	new file:   tokenizer_config.json
</code></pre></div><p>再看一下 git-lfs ：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> lfs status
</code></pre></div><div class="language-text" data-ext="text"><pre class="language-text"><code>On branch main
Objects to be pushed to origin/main:


Objects to be committed:

	config.json (Git: bc20ff2)
	pytorch_model.bin (LFS: 35686c2)
	sentencepiece.bpe.model (LFS: 988bc5a)
	special_tokens_map.json (Git: cb23931)
	tokenizer.json (Git: 851ff3e)
	tokenizer_config.json (Git: f0f7783)

Objects not staged for commit:

</code></pre></div><p>可以观察到 <em>pytorch_model.bin</em> 和 <em>sentencepiece.bpe.model</em> 使用的 LFS，其余的都是 Git。</p><p>最后，commit 并 push</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&quot;First model version&quot;</span>
<span class="token function">git</span> push
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-建立-model-card" tabindex="-1"><a class="header-anchor" href="#_3-建立-model-card" aria-hidden="true">#</a> 3. 建立 model card</h2>`,34),E=n("em",null,"README.md",-1),R={href:"https://arxiv.org/abs/1810.03993",target:"_blank",rel:"noopener noreferrer"},G=l('<p>model card 通常开篇为简短的概述说明其用途，然后是以下几部分：</p><ul><li>Model description 描述</li><li>Intended uses &amp; limitations 预期用途和限制</li><li>How to use 如何使用</li><li>Limitations and bias 局限性和偏见</li><li>Training data 训练数据</li><li>Training procedure 训练过程</li><li>Variable &amp; metrics 评估指标</li><li>Evaluation results 评估结果</li></ul><h3 id="model-card-metadata" tabindex="-1"><a class="header-anchor" href="#model-card-metadata" aria-hidden="true">#</a> Model card metadata</h3><p>在 Hugging Face Hub 中，有的 model 属于特定的类型，你可以通过 tasks, languages, libraries 等等来筛选。</p>',4),I={href:"https://huggingface.co/camembert-base/blob/main/README.md",target:"_blank",rel:"noopener noreferrer"},N=l(`<div class="language-markdown" data-ext="md"><pre class="language-markdown"><code><span class="token front-matter-block"><span class="token punctuation">---</span>
<span class="token front-matter yaml language-yaml"><span class="token key atrule">language</span><span class="token punctuation">:</span> fr
<span class="token key atrule">license</span><span class="token punctuation">:</span> mit
<span class="token key atrule">datasets</span><span class="token punctuation">:</span>
<span class="token punctuation">-</span> oscar</span>
<span class="token punctuation">---</span></span>
</code></pre></div>`,1),O={href:"https://github.com/huggingface/hub-docs/blame/main/modelcard.md",target:"_blank",rel:"noopener noreferrer"};function B(P,S){const i=c("ExternalLinkIcon"),p=c("CodeTabs");return r(),u("div",null,[n("p",null,[n("a",g,[a("Hugging Face Hub"),o(i)]),a(" 是主网站，我们可以在里面找到各种最新的模型和数据集，也可以上传自己的模型和数据集。")]),k,h,b,v,o(p,{id:"15",data:[{id:"pipeline"},{id:"model architecture"},{id:"Auto* Class"}],"tab-id":"python"},{title0:s(({value:e,isActive:t})=>[a("pipeline")]),title1:s(({value:e,isActive:t})=>[a("model architecture")]),title2:s(({value:e,isActive:t})=>[a("Auto* Class")]),tab0:s(({value:e,isActive:t})=>[_]),tab1:s(({value:e,isActive:t})=>[f]),tab2:s(({value:e,isActive:t})=>[y]),_:1}),x,o(p,{id:"66",data:[{id:"Notebook"},{id:"Terminal"}]},{title0:s(({value:e,isActive:t})=>[a("Notebook")]),title1:s(({value:e,isActive:t})=>[a("Terminal")]),tab0:s(({value:e,isActive:t})=>[q]),tab1:s(({value:e,isActive:t})=>[w]),_:1}),z,n("details",A,[M,n("p",null,[a("参考 "),n("a",T,[a("Git Large File Storage"),o(i)])]),o(p,{id:"189",data:[{id:"Ubuntu"},{id:"Mac"}],"tab-id":"shell"},{title0:s(({value:e,isActive:t})=>[a("Ubuntu")]),title1:s(({value:e,isActive:t})=>[a("Mac")]),tab0:s(({value:e,isActive:t})=>[L]),tab1:s(({value:e,isActive:t})=>[j]),_:1})]),F,n("p",null,[a("我们还会使用一些传统的 git 方法，参考"),n("a",C,[a("文档"),o(i)]),a("：")]),H,n("p",null,[a("建立 model card 是通过 "),E,a(" 来完成的。为了理解 model card 的重要作用，你可以阅读 "),n("a",R,[a("Model Cards for Model Reporting"),o(i)]),a("。")]),G,n("p",null,[a("请查看 "),n("a",I,[a("camembert-base model card"),o(i)]),a("，你能看到在 model card header 中有如下信息：")]),N,n("p",null,[a("具体配置可查看 "),n("a",O,[a("full model card specification"),o(i)]),a("。")])])}const U=d(m,[["render",B],["__file","Chapter4.html.vue"]]);export{U as default};
