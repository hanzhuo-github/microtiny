const e=JSON.parse('{"key":"v-bb09a2ca","path":"/code/data-structure-and-algorithm/stack.html","title":"栈","lang":"zh-CN","frontmatter":{"lang":"zh-CN","title":"栈","description":null,"article":false,"date":"2023-08-21T00:00:00.000Z"},"headers":[{"level":2,"title":"栈的应用","slug":"栈的应用","link":"#栈的应用","children":[{"level":3,"title":"函数调用栈","slug":"函数调用栈","link":"#函数调用栈","children":[]},{"level":3,"title":"表达式求值","slug":"表达式求值","link":"#表达式求值","children":[]},{"level":3,"title":"括号匹配","slug":"括号匹配","link":"#括号匹配","children":[]},{"level":3,"title":"浏览器回退、前进","slug":"浏览器回退、前进","link":"#浏览器回退、前进","children":[]}]}],"git":{"createdTime":1692617079000,"updatedTime":1692617079000,"contributors":[{"name":"Sunshine","email":"hanzhuosoul@gmail.com","commits":1}]},"readingTime":{"minutes":1.56,"words":467},"filePathRelative":"code/data-structure-and-algorithm/stack.md","localizedDate":"2023年8月21日","excerpt":"<h2> 栈的应用</h2>\\n<h3> 函数调用栈</h3>\\n<p>操作系统给每个线程分配了一块独立的内存空间，这块内存被组织成“栈”这种结构，用来存储函数调用时的临时变量。每进入一个函数，就会将临时变量作为一个栈帧入栈，当被调用函数执行完成，返回之后，将这个对应的栈帧出栈。</p>\\n<h3> 表达式求值</h3>\\n<p>编译器可以通过两个栈来实现四则运算。一个栈用来保存操作数，一个栈用来保存运算符。</p>\\n<p>从左向右遍历表达式，遇到数字时，直接入栈。遇到运算符时，与栈顶的运算符进行比较。如果比栈顶元素的优先级高，就入栈；否则，从运算符栈中取出运算符，从操作数栈栈顶取出 2 个操作数，进行运算后，将结果压入操作数栈。继续比较当前运算符和新的栈顶运算符。</p>"}');export{e as data};
