import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{r as e,o as c,c as i,a as u,b as n,d as s,e as o,w as r,f as a}from"./app-1e7cdb66.js";const d={},k=a("<p><code>symbol</code> 是唯一标识符的基本类型，用 <code>Symbol([name])</code> 创建。</p><p>symbol 的值总是不同的，这样我们可以用于“隐藏”对象属性。JavaScript 提供了系统 symbol，用 <code>Symbol.*</code> 进行访问，使用它们可以修改一些内建行为。</p><p>如果想让同名 symbol 相等，需要用到全局注册表，用 <code>Symbol.for(name)</code> 获取以及注册，返回的是 symbol；用 <code>Symbol.keyFor(symbol)</code> 可以在全局注册表中寻找其 name。</p>",3),m=a(`<p>对象的 key 只能是 String 类型或 Symbol 类型。使用字符串做 key 容易造成属性名的冲突，ES 6 引入 Symbol 正是为了防止属性名冲突的。</p><h2 id="_1-symbols" tabindex="-1"><a class="header-anchor" href="#_1-symbols" aria-hidden="true">#</a> 1. Symbols</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> id <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 传入 description</span>
<span class="token keyword">let</span> id1 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> id2 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

id1 <span class="token operator">==</span> id2      <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">Symbols 不能自动转化成 String</p><p>Symbol 不能自动转换成 String，你可以用 <code>toString()</code> 方法，或者输出 <code>symbol.description</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> id <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// TypeError</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>id<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// Symbol(id)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>id<span class="token punctuation">.</span>description<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// id</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h2 id="_2-作用" tabindex="-1"><a class="header-anchor" href="#_2-作用" aria-hidden="true">#</a> 2. 作用</h2><p>当我们使用外部的 user 对象时，想为该对象增加属性时，使用 Symbol 可以避免属性名冲突，有效防止双方对该属性进行的重写覆盖。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// another code</span>
<span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;Their Id&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> id <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span>

user<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Our Id&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们定义对象的时候，如果使用 Symbol，应该是：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> id <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token number">123</span> <span class="token comment">// not &quot;id&quot;: 123</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">使用 for...in 遍历 key 或 Object.keys(obj) 时，Symbol 会被略过</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> id <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token number">123</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> user<span class="token punctuation">)</span> <span class="token function">alert</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// name, age</span>
Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment">// [&#39;name&#39;, &#39;age&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>想要获得 symbol 属性，可以用以下方法：</p><ul><li><code>Object.getOwnPropertySymbols(obj)</code> 可以获取所有的 symbol 属性</li><li><code>Reflect.ownKeys(obj)</code> 可以返回对象<strong>所有</strong>键，包括 symbol</li></ul></div><div class="hint-container tip"><p class="hint-container-title">Object.assign() 既拷贝 string，也拷贝 symbol</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> id <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token number">123</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> clone <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">alert</span><span class="token punctuation">(</span> clone<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们在拷贝或者合并对象时是希望对所有的属性做操作的。</p></div><h2 id="_3-global-symbols" tabindex="-1"><a class="header-anchor" href="#_3-global-symbols" aria-hidden="true">#</a> 3. Global symbols</h2><p>有时我们希望在不同的地方使用相同名字的 symbol 且它们对应的实体也是相同的。</p><p>为了达到这个目的，我们需要使用<strong>全局 symbol 注册表（global symbol register）</strong>，全局注册表中的 symbol 被称为<strong>全局 Symbol</strong>。</p><h3 id="_3-1-symbol-for-key-读取-symbol" tabindex="-1"><a class="header-anchor" href="#_3-1-symbol-for-key-读取-symbol" aria-hidden="true">#</a> 3.1 Symbol.for(key) 读取 symbol</h3><p>在注册表中读取 symbol 时使用 <code>Symbol.for(key)</code>。如果全局注册表中有 description 为 key 的 symbol，就会返回该 symbol，都则将创建一个新的 symbol（即创建了 <code>Symbol(key)</code>），并将其存储在注册表中。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 从全局注册表中读取</span>
<span class="token keyword">let</span> id <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 如果该 symbol 不存在，则创建它</span>

<span class="token comment">// 再次读取（可能是在代码中的另一个位置）</span>
<span class="token keyword">let</span> idAgain <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 相同的 symbol</span>
<span class="token function">alert</span><span class="token punctuation">(</span> id <span class="token operator">===</span> idAgain <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-symbol-keyfor-symbol-读取-description" tabindex="-1"><a class="header-anchor" href="#_3-2-symbol-keyfor-symbol-读取-description" aria-hidden="true">#</a> 3.2 Symbol.keyFor(symbol) 读取 description</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 通过 name 获取 symbol</span>
<span class="token keyword">let</span> sym <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> sym2 <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> local_sym <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&quot;local&quot;</span><span class="token punctuation">)</span>

<span class="token comment">// 通过 symbol 获取 name</span>
<span class="token function">alert</span><span class="token punctuation">(</span> Symbol<span class="token punctuation">.</span><span class="token function">keyFor</span><span class="token punctuation">(</span>sym<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// name</span>
<span class="token function">alert</span><span class="token punctuation">(</span> Symbol<span class="token punctuation">.</span><span class="token function">keyFor</span><span class="token punctuation">(</span>sym2<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// id</span>
<span class="token function">alert</span><span class="token punctuation">(</span> Symbol<span class="token punctuation">.</span><span class="token function">keyFor</span><span class="token punctuation">(</span>local_sym<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined 只能查找全局注册表中的 symbol</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-系统-symbol" tabindex="-1"><a class="header-anchor" href="#_4-系统-symbol" aria-hidden="true">#</a> 4. 系统 symbol</h2>`,21),b={href:"https://tc39.es/ecma262/#sec-well-known-symbols",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"Symbol.*",-1),y=n("ul",null,[n("li",null,"Symbol.hasInstance"),n("li",null,"Symbol.isConcatSpreadable"),n("li",null,"Symbol.iterator"),n("li",null,"Symbol.toPrimitive")],-1),g=n("code",null,"Symbol.iterator",-1),h=a('<h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><ul><li><p><code>symbol</code> 是唯一标识符的基本类型，用 <code>Symbol([name])</code> 创建。</p></li><li><p>symbol 的值总是不同的，这样我们可以用于“隐藏”对象属性。JavaScript 提供了系统 symbol，用 <code>Symbol.*</code> 进行访问，使用它们可以修改一些内建行为。</p></li><li><p>如果想让同名 symbol 相等，需要用到全局注册表，用 <code>Symbol.for(name)</code> 获取以及注册，返回的是 symbol；用 <code>Symbol.keyFor(symbol)</code> 可以在全局注册表中寻找其 name。</p></li><li><p>注意：</p><ul><li>使用 <code>for...in</code> 遍历 key 或 <code>Object.keys(obj)</code> 时，Symbol 会被略过</li><li><code>Object.getOwnPropertySymbols(obj)</code> 可以获取所有的 symbol 属性</li><li><code>Reflect.ownKeys(obj)</code> 可以返回对象<strong>所有</strong>键，包括 symbol</li><li><code>Object.assign()</code> 既拷贝<strong>所有</strong>的属性，包括 symbol</li></ul></li></ul>',2);function f(S,_){const t=e("ExternalLinkIcon"),p=e("RouterLink");return c(),i("div",null,[k,u(" more "),m,n("p",null,[s("JavaScript 内置了很多"),n("a",b,[s("系统 symbol"),o(t)]),s("，用 "),v,s(" 来调用。我们可以用它们来微调对象的各个方面。")]),y,n("p",null,[s("可以参考 "),o(p,{to:"/post/iterables.html"},{default:r(()=>[s("iterables")]),_:1}),s(" ，其中使用 "),g,s(" 微调对象，以使得对象具有迭代性质。")]),h])}const w=l(d,[["render",f],["__file","Symbol.html.vue"]]);export{w as default};
