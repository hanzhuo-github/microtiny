const s=JSON.parse('{"key":"v-2bfb5101","path":"/code/data-structure-and-algorithm/recursion.html","title":"递归","lang":"zh-CN","frontmatter":{"lang":"zh-CN","title":"递归","description":null,"article":false,"date":"2023-08-21T00:00:00.000Z"},"headers":[{"level":2,"title":"递归需要满足的 3 个条件","slug":"递归需要满足的-3-个条件","link":"#递归需要满足的-3-个条件","children":[]},{"level":2,"title":"如何编写递归代码","slug":"如何编写递归代码","link":"#如何编写递归代码","children":[]},{"level":2,"title":"递归代码要警惕堆栈溢出","slug":"递归代码要警惕堆栈溢出","link":"#递归代码要警惕堆栈溢出","children":[]},{"level":2,"title":"警惕重复计算","slug":"警惕重复计算","link":"#警惕重复计算","children":[]},{"level":2,"title":"将递归代码改为非递归代码","slug":"将递归代码改为非递归代码","link":"#将递归代码改为非递归代码","children":[]}],"git":{"createdTime":1692617079000,"updatedTime":1692617079000,"contributors":[{"name":"Sunshine","email":"hanzhuosoul@gmail.com","commits":1}]},"readingTime":{"minutes":3.11,"words":934},"filePathRelative":"code/data-structure-and-algorithm/recursion.md","localizedDate":"2023年8月21日","excerpt":"<h2> 递归需要满足的 3 个条件</h2>\\n<ul>\\n<li>一个问题的解可以分解为几个子问题的解</li>\\n<li>这个问题与分解之后的子问题，除了数据规模不同，求解思路完全一样</li>\\n<li>存在递归终止条件</li>\\n</ul>\\n<h2> 如何编写递归代码</h2>\\n<p>关键在于<strong>写出递推公式，找到终止条件</strong>。</p>\\n<p>例题：有 n 个台阶，每次可以跨 1 个或 2 个台阶，请问走 n 个台阶有多少种走法？</p>\\n<p>分析：可以把第一个的走法分为两类，第一类是第一步走了 1 个台阶，另一类是第一步走了 2 个台阶。所以 n 个台阶的走法就等于先走 1 阶后，n - 1 个台阶的走法，加上先走 2 阶后，n - 2 个台阶的走法：<span class=\\"katex\\"><span class=\\"katex-mathml\\"><math xmlns=\\"http://www.w3.org/1998/Math/MathML\\"><semantics><mrow><mi>f</mi><mo stretchy=\\"false\\">(</mo><mi>n</mi><mo stretchy=\\"false\\">)</mo><mo>=</mo><mi>f</mi><mo stretchy=\\"false\\">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy=\\"false\\">)</mo><mo>+</mo><mi>f</mi><mo stretchy=\\"false\\">(</mo><mi>n</mi><mo>−</mo><mn>2</mn><mo stretchy=\\"false\\">)</mo></mrow><annotation encoding=\\"application/x-tex\\">f(n)=f(n-1)+f(n-2)</annotation></semantics></math></span><span class=\\"katex-html\\" aria-hidden=\\"true\\"><span class=\\"base\\"><span class=\\"strut\\" style=\\"height:1em;vertical-align:-0.25em;\\"></span><span class=\\"mord mathnormal\\" style=\\"margin-right:0.10764em;\\">f</span><span class=\\"mopen\\">(</span><span class=\\"mord mathnormal\\">n</span><span class=\\"mclose\\">)</span><span class=\\"mspace\\" style=\\"margin-right:0.2778em;\\"></span><span class=\\"mrel\\">=</span><span class=\\"mspace\\" style=\\"margin-right:0.2778em;\\"></span></span><span class=\\"base\\"><span class=\\"strut\\" style=\\"height:1em;vertical-align:-0.25em;\\"></span><span class=\\"mord mathnormal\\" style=\\"margin-right:0.10764em;\\">f</span><span class=\\"mopen\\">(</span><span class=\\"mord mathnormal\\">n</span><span class=\\"mspace\\" style=\\"margin-right:0.2222em;\\"></span><span class=\\"mbin\\">−</span><span class=\\"mspace\\" style=\\"margin-right:0.2222em;\\"></span></span><span class=\\"base\\"><span class=\\"strut\\" style=\\"height:1em;vertical-align:-0.25em;\\"></span><span class=\\"mord\\">1</span><span class=\\"mclose\\">)</span><span class=\\"mspace\\" style=\\"margin-right:0.2222em;\\"></span><span class=\\"mbin\\">+</span><span class=\\"mspace\\" style=\\"margin-right:0.2222em;\\"></span></span><span class=\\"base\\"><span class=\\"strut\\" style=\\"height:1em;vertical-align:-0.25em;\\"></span><span class=\\"mord mathnormal\\" style=\\"margin-right:0.10764em;\\">f</span><span class=\\"mopen\\">(</span><span class=\\"mord mathnormal\\">n</span><span class=\\"mspace\\" style=\\"margin-right:0.2222em;\\"></span><span class=\\"mbin\\">−</span><span class=\\"mspace\\" style=\\"margin-right:0.2222em;\\"></span></span><span class=\\"base\\"><span class=\\"strut\\" style=\\"height:1em;vertical-align:-0.25em;\\"></span><span class=\\"mord\\">2</span><span class=\\"mclose\\">)</span></span></span></span>。</p>"}');export{s as data};
