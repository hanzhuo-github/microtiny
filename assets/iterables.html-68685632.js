import{_ as c}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o as i,c as r,a as u,f as d,w as a,b as p,e as s,d as n}from"./app-2c4d3118.js";const k={},v=p("<p>可以用 <code>for...of</code> 进行遍历的都是 <code>可迭代对象（iterable）</code>。它是通过 <code>Symbol.iterator</code> 实现的，该属性值是个函数，返回一迭代器（迭代器必须有 <code>next()</code> 函数，<code>next()</code> 函数返回 <code>{done: Boolean, value: any}</code>，当 <code>done: true</code> 时迭代结束）。</p><p>String 和 Array 内部实现了 Symbol.iterable，它们内置的可迭代对象。用 <code>for...of</code> 对 String 进行遍历时，<code>surrogate pairs</code> 是可以被争取处理的。</p><p>有索引和 <code>length</code> 属性的对象叫类数组（array-like）。</p><p><code>Array.from(obj[, mapFn, thisArg])</code> 将可迭代对象或类数组 <code>obj</code> 转化为真正的数组。</p>",4),m=p(`<p>任何可以在 <code>for...of</code> 循环中使用的对象都是可迭代对象。例如，数组和字符串都是可迭代的。</p><p>对象本身不是数组，如果它表示一个集合（list 或 set），那么我们会很自然地想使用 <code>for..of</code> 来遍历它。如何使得一个表示集合的对象可以被 <code>for..of</code> 遍历呢？</p><h2 id="_1-symbol-iterator" tabindex="-1"><a class="header-anchor" href="#_1-symbol-iterator" aria-hidden="true">#</a> 1. Symbol.iterator</h2><p>我们有这样一个对象，它表示数字区间，我们希望遍历该对象获取该数字区间的值。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> range <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">from</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token literal-property property">to</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 目标：</span>
<span class="token comment">// for (let num of range) ... num = 1, 2, 3, 4, 5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们为对象增加一个名为 <code>Symbol.iterator</code> 的方法。</p><ul><li><p>当使用 <code>for...of</code> 时，它会调用这个方法（没有则会报错）。这个方法必须返回一个迭代器（iterator）——一个有 <code>next</code> 方法的对象。</p></li><li><p>之后，<code>for...of</code> <em>只对这个被返回的对象（即被返回的迭代器）进行操作</em>。</p></li><li><p>当 <code>for...of</code> 循环希望获取下一个数值时，它就调用这个对象的 <code>next()</code> 方法。</p></li><li><p><code>next()</code> 方法返回的结果的搁置必须是 <code>{done: Boolean, value: any}</code>，当 <code>done=True</code> 时，表示循环结束，否则 <code>value</code> 时下一个值。</p></li></ul><p>我们来看一下代码实现</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1. for..of 调用 Symbol.iteration 对应的函数</span>
range<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 返回迭代器</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">current</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>from<span class="token punctuation">,</span>
        <span class="token literal-property property">last</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>to<span class="token punctuation">,</span>

        <span class="token comment">// 迭代器要有 next 方法</span>
        <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>current <span class="token operator">&lt;=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>last<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>current<span class="token operator">++</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>迭代器和它所迭代的对象是分开的</summary><ul><li><code>range</code> 本身没有 <code>next()</code> 属性</li><li>迭代器是在 <code>range[Symbol.iteration]()</code> 被调用时生成的</li></ul><p>当然我们也可以让 range 直接成为一个迭代器：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> range <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">from</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> 
    <span class="token literal-property property">to</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>

    <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>from<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>current <span class="token operator">&lt;=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>to<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>current<span class="token operator">++</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是这样的问题是，我们不能使用同时运行两个 <code>for...of</code> 了。因为同时进行循环的情况下他们共享迭代状态，而我们只有一个迭代器。不过并行执行 <code>for...of</code> 还是很罕见的。</p></details><div class="hint-container info"><p class="hint-container-title">无穷迭代器</p><p>可以创建无穷迭代器。比如设置 <code>range.to = Infinity</code>。</p><p>对于无穷迭代器，我们可以使用 <code>break</code> 来停止。</p></div><h2 id="_2-显示调用迭代器" tabindex="-1"><a class="header-anchor" href="#_2-显示调用迭代器" aria-hidden="true">#</a> 2. 显示调用迭代器</h2><p>String 都是可迭代的，即可以使用 <code>for...of</code> 对其进行遍历。对于 SP 上的 surrogate pairs 也可以正常地处理。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;𝒳😂&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> char <span class="token keyword">of</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span> char <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 𝒳，然后是 😂</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面我们直接使用迭代器本身来进行 <code>for...of</code> 遍历。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&quot;Hello&quot;</span>

<span class="token comment">// 实现 for (char of str) alert(char); 的效果</span>

<span class="token keyword">let</span> iterator <span class="token operator">=</span> str<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> result <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>done<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token function">alert</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 输出字符</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样做给了我们更多的控制权，不过很少这样做。比如，我们可以迭代一部分，做一些其他的操作，然后再继续迭代。</p><h2 id="_3-可迭代-iterable-v-s-类数组-array-like" tabindex="-1"><a class="header-anchor" href="#_3-可迭代-iterable-v-s-类数组-array-like" aria-hidden="true">#</a> 3. 可迭代（iterable）v.s. 类数组（array-like）</h2><ul><li>iterables: 实现了 <code>Symbol.iterator</code> 方法的对象</li><li>array-likes: 有索引和 <code>length</code> 属性的对象</li></ul><p>例如，String 它既是 iterable 也是 array-like。上面的 <code>range</code> 是 iterable 但不是 array-like。</p><p>这里给一个 array-like 的对象：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arrayLike <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token number">0</span><span class="token operator">:</span> <span class="token string">&quot;apple&quot;</span><span class="token punctuation">,</span>
    <span class="token number">1</span><span class="token operator">:</span> <span class="token string">&quot;banana&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要注意，iterables 和 array-likes 都<em>不是 array</em>，没有 <code>push</code>、<code>pop</code> 等数组方法。</p><p>但是对于 <code>arrayLike</code> 这个对象，我们可能会很自然地想到，如果能用 array 的方法就好了。</p><h2 id="_4-array-from" tabindex="-1"><a class="header-anchor" href="#_4-array-from" aria-hidden="true">#</a> 4. Array.from</h2><p><code>Array.from</code> 可以将 iterables 和 array-likes 转成 array。</p>`,26),b=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"let"),s(" arr "),n("span",{class:"token operator"},"="),s(" Array"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"from"),n("span",{class:"token punctuation"},"("),s("arrayLike"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token function"},"alert"),n("span",{class:"token punctuation"},"("),s("arr"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"pop"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s("       "),n("span",{class:"token comment"},"// banana"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("div",{class:"highlight-line"}," "),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),y=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"let"),s(" arr "),n("span",{class:"token operator"},"="),s(" Array"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"from"),n("span",{class:"token punctuation"},"("),s("range"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token function"},"alert"),n("span",{class:"token punctuation"},"("),s("arr"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s("         "),n("span",{class:"token comment"},"// 1, 2, 3, 4, 5"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("div",{class:"highlight-line"}," "),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),h=p(`<p><code>Array.from</code> 的完整语法为</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span><span class="token punctuation">,</span> mapFn<span class="token punctuation">,</span> thisArg<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>range<span class="token punctuation">,</span> <span class="token parameter">num</span> <span class="token operator">=&gt;</span> num <span class="token operator">*</span> num<span class="token punctuation">)</span>

<span class="token function">alert</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 1, 4, 9, 16, 25</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于 surrogate pairs，str 的 <code>slice</code> 方法不能正确处理，我们可以利用 Array.from 来做处理：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">slice</span><span class="token punctuation">(</span><span class="token parameter">str<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;𝒳😂𩷶&#39;</span>

<span class="token function">slice</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 😂𩷶</span>
str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// \\uDCB3\\uD83D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><ul><li>可迭代对象（iterables）：可以用 <code>for...of</code> 进行遍历的对象 <ul><li>使用 <code>Symbol.iterator</code> 实现 <ul><li><code>obj[Symbol.iterator]()</code> 的结果被称为 迭代器（iterator）</li><li>迭代器必须有 next() 方法，它返回 <code>{done: Boolean, value: any}</code>，<code>done:true</code> 表明迭代结束，否则 value 就是 next 值。</li></ul></li><li>String 和 Array 是内置的可迭代对象。</li><li>字符串迭代器可以正确处理 surrogate pair。</li></ul></li><li>类数组（array-like）：有索引和 <code>length</code> 属性的对象</li><li><code>Array.from(obj[, mapFn, thisArg])</code> 将可迭代对象或类数组转化为真正的数组。</li></ul>`,8);function f(g,w){const o=l("CodeTabs");return i(),r("div",null,[v,u(" more "),m,d(o,{id:"132",data:[{id:"array-like"},{id:"iterable"}],"tab-id":"Array.from"},{title0:a(({value:e,isActive:t})=>[s("array-like")]),title1:a(({value:e,isActive:t})=>[s("iterable")]),tab0:a(({value:e,isActive:t})=>[b]),tab1:a(({value:e,isActive:t})=>[y]),_:1}),h])}const _=c(k,[["render",f],["__file","iterables.html.vue"]]);export{_ as default};
