const l=JSON.parse('{"key":"v-af0b2240","path":"/code/data-structure-and-algorithm/hash-table.html","title":"散列表","lang":"zh-CN","frontmatter":{"lang":"zh-CN","title":"散列表","description":null,"article":false,"date":"2023-09-06T00:00:00.000Z"},"headers":[{"level":2,"title":"1. 解决散列冲突的方法","slug":"_1-解决散列冲突的方法","link":"#_1-解决散列冲突的方法","children":[{"level":3,"title":"1.1 开放寻址法（open addressing）","slug":"_1-1-开放寻址法-open-addressing","link":"#_1-1-开放寻址法-open-addressing","children":[{"level":4,"title":"1.1.1 线性探测（Linear Probing）","slug":"_1-1-1-线性探测-linear-probing","link":"#_1-1-1-线性探测-linear-probing","children":[]},{"level":4,"title":"1.1.2 二次探测（Quadratic probing）","slug":"_1-1-2-二次探测-quadratic-probing","link":"#_1-1-2-二次探测-quadratic-probing","children":[]},{"level":4,"title":"1.1.3 双重散列（Double hashing）","slug":"_1-1-3-双重散列-double-hashing","link":"#_1-1-3-双重散列-double-hashing","children":[]}]},{"level":3,"title":"1.2 链表法（chaining）","slug":"_1-2-链表法-chaining","link":"#_1-2-链表法-chaining","children":[]}]},{"level":2,"title":"2. 打造一个工业级水平的散列表","slug":"_2-打造一个工业级水平的散列表","link":"#_2-打造一个工业级水平的散列表","children":[{"level":3,"title":"2.1 如何设计？","slug":"_2-1-如何设计","link":"#_2-1-如何设计","children":[]},{"level":3,"title":"2.2 工业级散列表","slug":"_2-2-工业级散列表","link":"#_2-2-工业级散列表","children":[{"level":4,"title":"2.2.1 初始大小","slug":"_2-2-1-初始大小","link":"#_2-2-1-初始大小","children":[]},{"level":4,"title":"2.2.2 装在因子和动态扩容","slug":"_2-2-2-装在因子和动态扩容","link":"#_2-2-2-装在因子和动态扩容","children":[]},{"level":4,"title":"2.2.3 散列冲突解决方法","slug":"_2-2-3-散列冲突解决方法","link":"#_2-2-3-散列冲突解决方法","children":[]},{"level":4,"title":"2.2.4 散列函数","slug":"_2-2-4-散列函数","link":"#_2-2-4-散列函数","children":[]}]}]}],"git":{"createdTime":1700236816000,"updatedTime":1700236816000,"contributors":[{"name":"Sunshine","email":"hanzhuosoul@gmail.com","commits":1}]},"readingTime":{"minutes":7.97,"words":2390},"filePathRelative":"code/data-structure-and-algorithm/hash-table.md","localizedDate":"2023年9月6日","excerpt":"<p>我们也称散列表为哈希表或 hash 表。它利用数组支持按照下标随机访问数据的特性，是数组的一种扩展。</p>\\n<p>键（key）、散列函数（hash 函数、哈希函数）、散列值（hash 值、哈希值）</p>\\n<p>hash 函数设计的基本要求：</p>\\n<ol>\\n<li>hash 函数计算得到的 hash 值是一个非负整数</li>\\n<li>如果 key1 = key2，那么 hash(key1) = hash(key2)</li>\\n<li>如果 key1 ≠ key2，那么 hash(key1) ≠ hash(key2)</li>\\n</ol>\\n<p>但是在实际中，无法完全避免散列冲突。</p>"}');export{l as data};
